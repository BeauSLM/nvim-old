" Note: run PlugUpdate/Install first
set termguicolors
call plug#begin('~/.vim/plugged')
Plug 'neovim/nvim-lspconfig'
Plug 'RRethy/vim-illuminate'
Plug '/Users/ray.xu/github/lsp_signature.nvim'
Plug '/Users/ray.xu/github/guihua.lua'
Plug '/Users/ray.xu/github/navigator.lua'
Plug 'ray-x/aurora'

call plug#end()

lua <<EOF
-- require'lspconfig'.rust_analyzer.setup{}

require'lsp_signature'.on_attach({log_path = "/Users/ray.xu/tmp/sig.log", debug = true})

local protocol = require'vim.lsp.protocol'
vim.lsp.set_log_level("debug")
local capabilities = protocol.make_client_capabilities()
capabilities.textDocument.completion.completionItem.snippetSupport = true

local capabilities = vim.lsp.protocol.make_client_capabilities()
local sumneko_root_path = vim.fn.expand("$HOME") .. "/github/sumneko/lua-language-server"
local sumneko_binary = vim.fn.expand("$HOME")
                           .. "/github/sumneko/lua-language-server/bin/macOS/lua-language-server"

-- require'lspconfig'.gopls.setup({
--     on_attach = function()
--     require'lsp_signature'.on_attach({bind = false, floating_window=false, hint_enable = true})
--     end
-- })

-- local luadev = require("lua-dev").setup(cfg)
local single = {"╭", "─", "╮", "│", "╯", "─", "╰", "│"}
print("navigator setup")
require"navigator".setup({
  debug = true,
  width = 0.7,
  border = single, -- "single",
  lsp = {
    format_on_save = true, -- set to false to disasble lsp code format on save (if you are using prettier/efm/formater etc)
    denols = {filetypes = {}},
    -- flow = {
    --   filetypes ={},
    -- },
    tsserver = {
      filetypes = {
        "javascript", "javascriptreact", "javascript.jsx", "typescript", "typescriptreact",
        "typescript.tsx"
      }
    },
    gopls = {
      on_attach = function(client)
        -- print("i am a hook")
        client.resolved_capabilities.document_formatting = false
        require 'illuminate'.on_attach(client)
      end,
      settings = {
        gopls = {gofumpt = true} -- enableww gofumpt etc,
      }
      -- set to {} to disable the lspclient for all filetype
    },
    clangd = {filetypes = {}},
    sumneko_lua = {
      sumneko_root_path = sumneko_root_path,
      sumneko_binary = sumneko_binary
      -- settings = luadev.settings
    }
  }
})



-- LSP SERVER CONFIGURATION
-- ===================================================================
local configs = require 'lspconfig/configs'
-- if not require'lspconfig'.vhdl_ls then configs['vhdl_ls'] = {default_config = {}} end
-- require'lspconfig'.vhdl_ls.setup ({
--     cmd = {"/Users/ray.xu/lsp_test/vhdl/rust_hdl/target/release/vhdl_ls"},
--     filetypes = {"vhdl"},
--     root_dir = require('lspconfig/util').root_pattern("vhdl_ls.toml"),
--     on_attach = function(client, bufnr)
--         client.resolved_capabilities.document_symbol  = false
--         client.resolved_capabilities.workspace_symbol = false
--     end,
-- })


EOF

set mouse=a
colorscheme aurora



" Plug 'simrat39/rust-tools.nvim'

" Plug 'ray-x/lsp_signature.nvim'
" Plug '/Users/ray.xu/github/guihua.lua'
" Plug '/Users/ray.xu/github/navigator.lua'
" Plug '/Users/ray.xu/github/lsp_signature.nvim'

" colorscheme dracula
" let material_style = 'mariana'
" let material_style_fix = v:true
" colorscheme material
" call plug#begin('~/.vim/plugged')
" 
" set noswapfile
" 
" Plug 'neovim/nvim-lspconfig'
" 
" " Plug 'lewis6991/gitsigns.nvim'
" " Plug 'ray-x/guihua.lua', {'do': 'cd lua/fzy && make' }
" 
" Plug '//Users/ray.xu/githubguihua.lua', {'do': 'cd lua/fzy && " make' }
" Plug '/Users/ray.xu/github/navigator.lua'
" 
" " Plug 'ray-x/lsp_signature.nvim'
" Plug 'liuchengxu/vim-clap', { 'do': { -> " clap#installer#force_download() } }
" Plug 'nvim-lua/popup.nvim'
" Plug 'nvim-lua/plenary.nvim'
" Plug 'nvim-telescope/telescope.nvim'
" 
" call plug#end()
" lua print(vim.inspect(vim.lsp.buf_get_clients(0)))"

" Plug 'ray-x/guihua.lua', {'do': 'cd lua/fzy && make' }
" Plug 'ray-x/navigator.lua'
" Plug '/Users/ray.xu/github/navigator.lua'
" Plug '/Users/ray.xu/tmp/lsp_signature.nvim'

lua <<EOF




-- require'lspconfig'.elixirls.setup{
--   capabilities = capabilities,
--   on_attach = function(client, bufnr)
--     print("attach", client)
--     require('lsp_signature').on_attach({log_path = "/Users/ray.xu/tmp/sig.log", debug = true})
--   end,
--   cmd = {
--     -- vim.loop.os_homedir() .. "/lsp_test/elixir/elixir-ls/rel/language_server.sh"
--     "/Users/ray.xu/lsp_test/elixir/elixir-ls/rel/language_server.sh"
--   },
--   settings = {
--     elixirLS = {
--       dialyzerEnabled = true;
--     }
--   }
-- }



-- require'navigator'.setup({debug=true})
-- require'lspconfig'.gopls.setup({})
-- local util = require'lspconfig.util'
-- require'lspconfig'.gopls.setup{
-- 	on_attach = function(client, bufnr)
-- 		  print(debug.traceback())
--           --print(vim.inspect(client))
-- 	end,
-- 	root_dir = function(fname)
--       print(fname)
--       return util.root_pattern("go.mod", ".git")(fname) or util.path.dirname(fname)
--     end
-- }
-- require'lspconfig'.pyright.setup {}

-- require'navigator'.setup({  lsp = {
--     format_on_save = true, -- set to false to disasble lsp code mat on save (if you -- are using prettier/efm/formater etc)
--     tsserver = {
--       filetypes = {'typescript'} -- disable javascript etc, 
--       -- set to {} to disable the lspclient for all filetype
--            }
--    }})
-- require "pears".setup()
-- require('nvim-autopairs').setup()


-- require('rust-tools').setup(opts)
-- require'navigator'.setup({
--   width = 0.8,
--   height = 0.4,
--   debug = true,
--   lsp = {
--     format_on_save = true, -- set to false to disasble lsp code mat on save (if you -- are using prettier/efm/formater etc)
--     tsserver = {
--       filetypes = {'typescript'} -- disable javascript etc, 
--       -- set to {} to disable the lspclient for all filetype
--            }
--    }})
-- 
-- local util = require'lspconfig.util'

-- require'lsp_signature'.on_attach({bind = false, use_lspsaga=false, floating_window=false, hint_enable = true})


-- require('navigator').setup()

-- require'lspconfig'.pyright.setup {}
-- require "lspconfig".efm.setup {
--     init_options = {documentFormatting = true},
--     settings = {
--         rootMarkers = {".git/"},
--         languages = {
--             lua = {
--                 {formatCommand = "lua-format -i", formatStdin = -- true}
--             },
--             python = {
--                 {formatCommand = "python-flake8 -i", formatStdin = -- true}
--             }
--         }
--     }
-- }
-- local sumneko_root_path = vim.fn.expand("$HOME")..'/github/sumneko/-- lua-language-server'
-- local sumneko_binary = vim.fn.expand("$HOME")..'/github/sumneko/-- lua-language-server/bin/macOS/lua-language-server'


-- local lua_cfg = {
--   cmd = {sumneko_binary, "-E", sumneko_root_path .. "/main.lua"},
--   settings = {
--     Lua = {
--       runtime = {
--         -- Tell the language server which version of Lua you're -- using (most likely LuaJIT in the case of Neovim)
--         version = "LuaJIT",
--         -- Setup your lua path
--         path = vim.split(package.path, ";")
--       },
--       diagnostics = {
--         enable = true,
--         -- Get the language server to recognize the `vim` global
--         globals = {
--           "vim",
--           "describe",
--           "it",
--           "before_each",
--           "after_each",
--           "teardown",
--           "pending"
--         }
--       },
--       workspace = {
--         -- Make the server aware of Neovim runtime files
--         library = {
--           [vim.fn.expand("$VIMRUNTIME/lua")] = true,
--           [vim.fn.expand("$VIMRUNTIME/lua/vim")] = true,
--           [vim.fn.expand("$VIMRUNTIME/lua/vim/lsp")] = true
--           -- [vim.fn.expand("~/repos/nvim/lua")] = true
--         }
--       }
--     }
--   }
-- }
-- require'lspconfig'.sumneko_lua.setup (lua_cfg)

EOF


" 
" 
" -- require'lsp_signature'.on_attach()
" 

" Plug 'ray-x/guihua.lua', {'do': 'cd lua/fzy && make' }
" Plug 'ray-x/navigator.lua'
" Plug 'ray-x/lsp_signature.nvim'

" -- require('lsp_config')  -- you may need my lsp_config.lua
" require('lsp_signature').on_attach()

" 
" local on_attach = function(client, bufnr)
"   require'lsp_signature'.on_attach()
" 
"   if client.resolved_capabilities.document_formatting then
"     format.lsp_before_save()
"   end
"   vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')
" 
" end
" 
" local sumneko_root_path = vim.fn.expand("$HOME")..'/github/sumneko/lua-language-server'
" local sumneko_binary = vim.fn.expand("$HOME")..'/github/sumneko/lua-language-server/bin/macOS/lua-language-server'

" require'lspconfig'.sumneko_lua.setup {
"   cmd = {sumneko_binary, "-E", sumneko_root_path .. "/main.lua"};
"   on_attach = on_attach,
" }
" 
" let s:config_home = stdpath('config')
" source /Users/ray.xu/.config/nvim/pluginrc.d/lsp.vim
" 
" let g:deoplete#enable_at_startup = 1
" set cmdheight=2
" let g:echodoc#enable_at_startup = 1
" let g:echodoc#type = 'floating'


" lua require('treesitter')

" inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Set completeopt to have a better completion experience
" set completeopt=menuone,noinsert,noselect


nnoremap <silent> gd    <cmd>lua vim.lsp.buf.declaration()<CR>
nnoremap <silent> <c-]> <cmd>lua vim.lsp.buf.definition()<CR>
nnoremap <silent> K     <cmd>lua vim.lsp.buf.hover()<CR>
nnoremap <silent> gD    <cmd>lua vim.lsp.buf.implementation()<CR>
nnoremap <silent> <c-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
nnoremap <silent> 1gD   <cmd>lua vim.lsp.buf.type_definition()<CR>
nnoremap <silent> gr    <cmd>lua vim.lsp.buf.references()<CR>
nnoremap <silent> g0    <cmd>lua vim.lsp.buf.document_symbol()<CR>
nnoremap <silent> gW    <cmd>lua vim.lsp.buf.workspace_symbol()<CR>
nnoremap <buffer> <silent> <C-LeftMouse> <LeftMouse> <cmd>lua vim.lsp.buf.definition()<CR>
nnoremap <buffer> <silent> g<LeftMouse> <LeftMouse> <cmd>lua vim.lsp.buf.implementation()<CR>


" let g:vsnip_filetypes = {}
" let g:vsnip_filetypes.javascriptreact = ['javascript']
" let g:vsnip_filetypes.typescriptreact = ['typescript']
" let g:completion_trigger_character = ['.']
" let g:vsnip_snippet_dir = '/Users/ray.xu/github/dotfiles/snips'
" 
" let g:min_load = 1" 